---
import { AISummary } from "@/components/ai-summary";
import { summarizeReviews } from "@/lib/ai-summarizer";
import { fakeLogger } from "@/lib/fake-logger";
import { redis } from "@/lib/redis";
import type { Product, Review } from "@/lib/sample-data";

interface Props {
	product: Product;
	reviews: Review[];
}

interface StoredSummaryValue {
	text: string;
	timestamp: string;
}

const { product, reviews } = Astro.props;

let summary: StoredSummaryValue | null = null;
const cacheKey = `summary-product:${product.id}`;
const log = fakeLogger.child({ prefix: "[ai-summary-island]" });

try {
	summary = await redis.get(cacheKey);
	log.info(`${cacheKey} ${summary ? "HIT" : "MISSED"}`);

	if (!summary) {
		const aiSummary = await summarizeReviews(product.name, reviews);
		if (aiSummary?.text) {
			summary = {
				text: aiSummary.text,
				timestamp: String(aiSummary.response.timestamp),
			};
			await redis.set(cacheKey, summary);
			log.info(`${cacheKey} STORED`);
		} else {
			log.warn(`Summary result incomplete or missing`);
		}
	}
} catch (error) {
	log.error(`Error processing summary: ${error}`);
}
---

<AISummary text={summary?.text || ""}>
	<p class="sr-only" aria-live="polite" slot="top">
		AI Summary of reviews loaded
	</p>
</AISummary>
