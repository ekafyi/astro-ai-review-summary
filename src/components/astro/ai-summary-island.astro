---
import { AISummary } from "@/components/ai-summary";
import { summarizeReviews } from "@/lib/ai-summarizer";
import { fakeLogger } from "@/lib/fake-logger";
import type { Product, Review } from "@/lib/sample-data";

interface Props {
	product: Product;
	reviews: Review[];
}
const { product, reviews } = Astro.props;

const log = fakeLogger.child({ prefix: "[ai-summary-island]" });

const cacheKey = `summary-product:${product.id}` as const;
let summary = await Astro.session?.get(cacheKey);
log.info(`${cacheKey} ${summary ? "HIT" : "MISSED"}`);

if (!summary) {
	try {
		const aiResult = await summarizeReviews(product.name, reviews);
		if (aiResult?.text) {
			summary = {
				text: aiResult.text,
				timestamp: String(aiResult.response.timestamp),
			};
			await Astro.session?.set(cacheKey, summary, { ttl: 60 * 60 * 24 });
			log.info(`${cacheKey} stored`);
		} else {
			log.warn(`Summarize result incomplete or missing`);
		}
	} catch (error) {
		log.error(`Error generating summary: ${JSON.stringify(error)}`);
	}
}
---

<AISummary text={summary?.text || ""} />
